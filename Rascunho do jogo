#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <SDL.h>
#include <SDL_image.h>


// Chama todas as funções init necessárias
void init()
{
	SDL_Init(SDL_INIT_VIDEO);
	IMG_Init(IMG_INIT_PNG);
}

// Chama todas as funções quit necessárias
void quit()
{
	IMG_Quit();
	SDL_Quit();
}


// Função que carrega uma surface e cria uma textura dessa surface
SDL_Texture* load_texture(const char* image_Path, SDL_Renderer* window_Renderer)
{
	SDL_Texture* new_Texture = NULL;
	SDL_Surface* loaded_Surface = NULL;

	loaded_Surface = IMG_Load(image_Path);

	new_Texture = SDL_CreateTextureFromSurface(window_Renderer, loaded_Surface);

	SDL_FreeSurface(loaded_Surface);

	return new_Texture;
}



int main(int argc, char* argv[])
{
	// y62Kqx <- Alguma informação do professor que eu ñ lembro o que era

	init(); // Função que chama todas as funções init (escrita no topo desse código)


	//  =-= =-= =-= =-= =-=   Variáveis   =-= =-= =-= =-=  //

	//  =-= Variáveis de configuração =-=  //

	int window_Width = 768;  // 768 = 48x16  ou  16x48
	int window_Height = 576; // 576 = 36x16  ou  12x48

	int detetive_Width = 96 * (1/2);
	int detetive_Height = 96 * (1/2);
	int detetive_linha = 3;
	int detetive_coluna = 3;


	bool game_loop = true; // Variável que so fica falsa quando um evento finalizar o jogo
	int sprite = 1;        // Número do sprite do detetive que vai ser mostrado
	int background = 1;    // Número da imagem do background que vai ser mostrado
	
	bool secret_Unlocked = false; // shhhh eh segredo. . . fala baixo! SHHHHHHHH
	int puzzle = 0;               // Para de olhar pq vai ke pega no olho. Imagina se PEGA NO OLHO! ( _XoX)_
	bool puzzle_Finished = false; // ( OWO)/ ♪tuturu♫  ＼＼\(۶ ᐛ )۶//／／ invocação do feitiço de cegueira!zuoum!
	int aceso = 0;               // Desisto de fazer você parar de olhar (ﾉ≧∇≦)ﾉ ﾐ ┸━┸

	SDL_Event event; // Variável que vai conter eventos (qualquer input) do usuário
	
	//  =-=   Fim das variáveis de configuração   =-=  //
	//  =-----------------------------------------------=  //
	//  =-=   Variáveis da window e de renderização   =-=  //
	//  =-=        !!! Núcleo do programa !!!         =-=  //
	
	//                                    Título       Ponto incial x          Ponto inicial y         Largura       Altura              FLAG
	SDL_Window* main_Window = SDL_CreateWindow("Jogo", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_Width, window_Height, SDL_WINDOW_SHOWN);
	SDL_Surface* main_Surface = SDL_GetWindowSurface(main_Window);

	SDL_Renderer* window_Renderer = SDL_CreateRenderer(main_Window, -1, SDL_RENDERER_ACCELERATED);
	SDL_SetRenderDrawColor(window_Renderer, 0xFF, 0xFF, 0xFF, 255);

	SDL_Rect main_Rect;
	main_Rect.x = 0;
	main_Rect.y = 0;
	main_Rect.w = window_Width;
	main_Rect.h = window_Height;

	//  =-=   Fim das variáveis da Window   =-=  //
	//  =-----------------------------------------------=  //
	//  =-=   SDL_Surfaces, SDL_Rect e SDL_Textures   =-=  //


	SDL_Texture* background_Texture = NULL; // Contém as imagens dos backgrounds


	SDL_Rect tiles[12][16]; // Resolução da janela: 768x576 = (16x48) x (12x48) = (16 tiles de largura x48) x (36 tiles de altura x48)
	for (int linha = 0; linha < 12; linha++) // Representa as coordenadas y - altura
	{
		for (int coluna = 0; coluna < 16; coluna++) // Representa as coordenadas x - largura
		{
			tiles[linha][coluna].x = coluna * 16*3;
			tiles[linha][coluna].y = linha * 16*3;
			tiles[linha][coluna].w = 16*3;
			tiles[linha][coluna].h = 16*3;
		}
	}

	SDL_Texture* detetive_Texture = NULL; // Contém os sprites do detetive
	SDL_Rect detetive_Rect = tiles[detetive_linha][detetive_coluna];


	SDL_Texture* locker_Texture = NULL;
	SDL_Rect locker_Open_Clip;
	locker_Open_Clip.x = 16;
	locker_Open_Clip.y = 0;
	locker_Open_Clip.w = 16;
	locker_Open_Clip.h = 16;

	SDL_Rect locker_Closed_Clip;
	locker_Closed_Clip.x = 0;
	locker_Closed_Clip.y = 0;
	locker_Closed_Clip.w = 16;
	locker_Closed_Clip.h = 16;


	SDL_Texture* num_Texture = NULL;
	SDL_Rect normal_1_Rect; // Clip do número 1 branco da textura dos números
	normal_1_Rect.x = 0;
	normal_1_Rect.y = 0;
	normal_1_Rect.w = 8;
	normal_1_Rect.h = 8;
	SDL_Rect amarelo_1_Rect; // Clip do número 1 amarelo da textura dos números
	amarelo_1_Rect.x = 16;
	amarelo_1_Rect.y = 0;
	amarelo_1_Rect.w = 8;
	amarelo_1_Rect.h = 8;
	
	SDL_Rect normal_2_Rect; // Clip do numero 2 branco da textura dos números
	normal_2_Rect.x = 8;
	normal_2_Rect.y = 0;
	normal_2_Rect.w = 8;
	normal_2_Rect.h = 8;
	SDL_Rect amarelo_2_Rect; // Clip do número 2 amarelo da textura dos números
	amarelo_2_Rect.x = 24;
	amarelo_2_Rect.y = 0;
	amarelo_2_Rect.w = 8;
	amarelo_2_Rect.h = 8;

	SDL_Rect normal_3_Rect; // Clip do número 3 branco da textura dos números
	normal_3_Rect.x = 0;
	normal_3_Rect.y = 8;
	normal_3_Rect.w = 8;
	normal_3_Rect.h = 8;
	SDL_Rect amarelo_3_Rect; // Clip do número 3 amarelo da textura dos números
	amarelo_3_Rect.x = 16;
	amarelo_3_Rect.y = 8;
	amarelo_3_Rect.w = 8;
	amarelo_3_Rect.h = 8;

	SDL_Rect normal_4_Rect; // Clip do número 4 branco da textura dos números
	normal_4_Rect.x = 8;
	normal_4_Rect.y = 8;
	normal_4_Rect.w = 8;
	normal_4_Rect.h = 8;
	SDL_Rect amarelo_4_Rect; // Clip do número 4 amarelo da textura dos números
	amarelo_4_Rect.x = 24;
	amarelo_4_Rect.y = 8;
	amarelo_4_Rect.w = 8;
	amarelo_4_Rect.h = 8;



	//  =-= =-= =-=   Fim das Variáveis   =-= =-= =-=  //
	//  =------------------------------------------=  //
	//  =-= =-= =-=   Começo do códico   =-= =-= =-=  //

	// Preenchimento e renderização do background
	background_Texture = load_texture("Imagens/pokemon room 1.png", window_Renderer);
	SDL_RenderCopy(window_Renderer, background_Texture, NULL, NULL);

	// Preenchimento da texture do cadeado
	locker_Texture = load_texture("Imagens/cadeado.png", window_Renderer);

	// Loop principal do jogo (Importante: apenas no inicio a janela é atualizada, função load_texture() escrita no topo desse código)
	while (game_loop)
	{
		// Atualiza e mostra a janela
		SDL_RenderPresent(window_Renderer);

		// Loop que trata os eventos
		while (SDL_PollEvent( &event ) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if ( event.type == SDL_QUIT )
			{
				game_loop = false;
			}
			// Evento: Pressionar uma tecla qualquer no teclado
			else if ( event.type == SDL_KEYDOWN )
			{
				// Switch das teclas que fazem algo ao serem pressionadas
				switch (event.key.keysym.sym)
				{
				case SDLK_w:
					switch (sprite) // Troca o sprite
					{
					case 1:
						detetive_Texture = load_texture("Imagens/detetive costa 1.png", window_Renderer);

						sprite += 1;
						break;

					case 2:
						detetive_Texture = load_texture("Imagens/detetive costa 2.png", window_Renderer);

						sprite += 1;
						break;
					case 3:
						detetive_Texture = load_texture("Imagens/detetive costa 3.png", window_Renderer);

						sprite += 1;
						break;
					case 4:
						detetive_Texture = load_texture("Imagens/detetive costa 4.png", window_Renderer);

						sprite = 1;
						break;
					} // Fim do switch dos sprites

					// detetive_Rect.y -= detetive_Height; // Movimentação do ponto de referência do retângulo (move o detetive) (remover)
					if (detetive_linha - 1 >= 0)
					{
						detetive_linha -= 1;
						detetive_Rect = tiles[detetive_linha][detetive_coluna];
					}

					break; // Fim do switch da tecla SDLK_w

				case SDLK_a:
					switch (sprite) // Troca o sprite
					{
					case 1:
						detetive_Texture = load_texture("Imagens/detetive lado esquerdo 1.png", window_Renderer);

						sprite += 1;
						break;

					case 2:
						detetive_Texture = load_texture("Imagens/detetive lado esquerdo 2.png", window_Renderer);

						sprite += 1;
						break;
					case 3:
						detetive_Texture = load_texture("Imagens/detetive lado esquerdo 3.png", window_Renderer);

						sprite += 1;
						break;
					case 4:
						detetive_Texture = load_texture("Imagens/detetive lado esquerdo 4.png", window_Renderer);

						sprite = 1;
						break;
					} // Fim do switch dos sprites

					if (detetive_coluna -1 >= 0)
					{
						detetive_coluna -= 1;
						detetive_Rect = tiles[detetive_linha][detetive_coluna];
					}

					break; // Fim do switch da tecla SDLK_a

				case SDLK_s:
					switch (sprite) // Troca o sprite
					{
					case 1:
						detetive_Texture = load_texture("Imagens/detetive frente 1.png", window_Renderer);

						sprite += 1;
						break;

					case 2:
						detetive_Texture = load_texture("Imagens/detetive frente 2.png", window_Renderer);

						sprite += 1;
						break;
					case 3:
						detetive_Texture = load_texture("Imagens/detetive frente 3.png", window_Renderer);

						sprite += 1;
						break;
					case 4:
						detetive_Texture = load_texture("Imagens/detetive frente 4.png", window_Renderer);

						sprite = 1;
						break;
					} // Fim do switch dos sprites

					if (detetive_linha +1 < 12)
					{
						detetive_linha += 1;
						detetive_Rect = tiles[detetive_linha][detetive_coluna];
					}

					break; // Fim do switch da tecla SDLK_s

				case SDLK_d:
					switch (sprite) // Troca o sprite
					{
					case 1:
						detetive_Texture = load_texture("Imagens/detetive lado direito 1.png", window_Renderer);

						sprite += 1;
						break;

					case 2:
						detetive_Texture = load_texture("Imagens/detetive lado direito 2.png", window_Renderer);

						sprite += 1;
						break;
					case 3:
						detetive_Texture = load_texture("Imagens/detetive lado direito 3.png", window_Renderer);

						sprite += 1;
						break;
					case 4:
						detetive_Texture = load_texture("Imagens/detetive lado direito 4.png", window_Renderer);

						sprite = 1;
						break;
					} // Fim do switch dos sprites

					if (detetive_coluna +1 < 16)
					{
						detetive_coluna += 1;
						detetive_Rect = tiles[detetive_linha][detetive_coluna];
					}

					break; // Fim do switch da tecla SDLK_d

				case SDLK_ESCAPE:
					
 					game_loop = false; // Encerra o loop, encerra o programa

					break;

				case SDLK_f:
					if (background == 0)
					{
						secret_Unlocked = true;
						background = 6;
					}

					break;

				case SDLK_SPACE:
					if (background != 6)
					{
						background += 1;
					}
					switch (background) // Troca o background
					{
					case 1:
						background_Texture = load_texture("Imagens/pokemon room 1.png", window_Renderer);
						break;

					case 2:
						background_Texture = load_texture("Imagens/pokemon room 2.png", window_Renderer);
						break;

					case 3:
						background_Texture = load_texture("Imagens/cidade.png", window_Renderer);
						break;

					case 4:
						background_Texture = load_texture("Imagens/background 1.png", window_Renderer);
						break;

					case 5:
						background_Texture = load_texture("Imagens/background 2.png", window_Renderer);

						background = 0;
						break;

					} // Fim do switch dos backgrounds
					
					break; // Fim do switch da tecla SDLK_SPACE

				} // Fim do switch das teclas
				
			} // Fim dos evento de teclado

		} // Fim do loop de tratamento de eventos

		SDL_RenderCopy(window_Renderer, background_Texture, NULL, NULL); // Recoloca o background para retirar a imagem do detetive
		SDL_RenderCopy(window_Renderer, detetive_Texture, NULL, &detetive_Rect); // Coloca a imagem do detetive na main_Window
		SDL_RenderCopy(window_Renderer, locker_Texture, &locker_Open_Clip, &tiles[5][7]);
		
		if (secret_Unlocked)
		{
			background_Texture = load_texture("Imagens/background 3.png", window_Renderer);
			secret_Unlocked = false;
			puzzle = 1;

			num_Texture = load_texture("Imagens/tiles numero.png", window_Renderer);
			num_Texture = load_texture("Imagens/tiles numero.png", window_Renderer);
			num_Texture = load_texture("Imagens/tiles numero.png", window_Renderer);
			num_Texture = load_texture("Imagens/tiles numero.png", window_Renderer);
		}

		switch (puzzle)
		{
		case 1:
			if (aceso >= 1)
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &amarelo_1_Rect, &tiles[0][0]);
			}
			else
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &normal_1_Rect, &tiles[0][0]);
			}

			if (aceso >= 2)
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &amarelo_2_Rect, &tiles[0][15]);
			}
			else
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &normal_2_Rect, &tiles[0][15]);
			}

			if (aceso >= 3)
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &amarelo_3_Rect, &tiles[11][0]);
			}
			else
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &normal_3_Rect, &tiles[11][0]);
			}

			if (aceso >= 4)
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &amarelo_4_Rect, &tiles[11][15]);
			}
			else
			{
				SDL_RenderCopy(window_Renderer, num_Texture, &normal_4_Rect, &tiles[11][15]);
			}


			SDL_RenderCopy(window_Renderer, locker_Texture, &locker_Closed_Clip, &tiles[5][7]);


			if (detetive_linha == 0 && detetive_coluna == 0 && aceso == 0)
			{
				aceso = 1;
			}
			else if (detetive_linha == 0 && detetive_coluna == 15 && aceso == 1)
			{
				aceso = 2;
			}
			else if (detetive_linha == 11 && detetive_coluna == 0 && aceso == 2)
			{
				aceso = 3;
			}
			else if (detetive_linha == 11 && detetive_coluna == 15 && aceso == 3)
			{
				aceso = 4;
			}

			if (aceso == 4)
			{
				puzzle_Finished = true;
			}

			if(puzzle_Finished)
			{
				puzzle = 0;
				puzzle_Finished = false;
				background = 0;
			}
			break;

		} // Fim do switch do puzzle

	} // Fim do while(game_loop)


	// Finalização do SDL
	SDL_DestroyRenderer(window_Renderer);
	SDL_DestroyWindow(main_Window);
	quit(); // Função que chama todas as funções quit (escrita no topo desse código)

	return 0;
} // Fim do Main


