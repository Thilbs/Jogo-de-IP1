#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
#include <SDL_mixer.h>
#include <time.h>


// Chama todas as funções init necessárias
void init()
{
	SDL_Init(SDL_INIT_VIDEO);
	IMG_Init(IMG_INIT_PNG);
}


// Chama todas as funções quit necessárias
void quit()
{
	IMG_Quit();
	SDL_Quit();
}



// ------------------------------------------------------------------------------------- //


// Função que carrega uma surface e cria uma textura dessa surface
SDL_Texture* load_texture(const char* image_Path, SDL_Renderer* window_Renderer)
{
	SDL_Texture* new_Texture = NULL;
	SDL_Surface* loaded_Surface = NULL;

	loaded_Surface = IMG_Load(image_Path);

	new_Texture = SDL_CreateTextureFromSurface(window_Renderer, loaded_Surface);

	SDL_FreeSurface(loaded_Surface);

	return new_Texture;
}


// Função que permite alterar as características de um retângulo
void alterar_retangulo(SDL_Rect* rect, int x, int y, int w, int h)
{
	(*rect).x += x;
	(*rect).y += y;
	(*rect).w += w;
	(*rect).h += h;
}

//
void coloca_fundo_preto(SDL_Renderer* window_Renderer)
{
	SDL_Texture* fundo_Preto_Texture = load_texture("imagens/fundo preto.png", window_Renderer);

	SDL_RenderCopy(window_Renderer, fundo_Preto_Texture, NULL, NULL);

	SDL_DestroyTexture(fundo_Preto_Texture);
	fundo_Preto_Texture = NULL;
}

// Função que salva o jogo
void save_game()
{
	FILE* file = fopen("imagens\texte.txt", "w");

	char mensagem[9] = "mensagem";

	fwrite(&mensagem, sizeof(mensagem), 9, file);

	fclose(file);
}


// -------------------------------------------------------------------------------------- //


void creditos(SDL_Renderer* window_Renderer)
{
	SDL_Texture* creditos_Texture = load_texture("imagens/creditos.png", window_Renderer);
	// SDL_SetTextureAlphaMod(creditos_Texture, 50);
	// SDL_SetTextureBlendMode(creditos_Texture, SDL_BLENDMODE_ADD);
	// SDL_SetTextureColorMod(creditos_Texture, 255, 255, 255);

	SDL_RenderCopy(window_Renderer, creditos_Texture, NULL, NULL);
	
	// ------------------------------- //

	SDL_Event event;
	bool creditos = true;
	
	while (creditos)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0)
		{
			//Evento: Fechar janela | Evento: qualquer tecla pressionada | Evento: qualquer botçao do mause pressionado
			if (event.type == SDL_QUIT || event.type == SDL_KEYDOWN || event.type == SDL_MOUSEBUTTONDOWN)
			{
				creditos = false;
			}
		} // Fim do loop de eventos
	
	} // Fim do while(creditos)

	// Finalização dos créditos
	SDL_DestroyTexture(creditos_Texture);

	creditos_Texture = NULL;

} // Fim da função de créditos


void controle(SDL_Renderer* window_Renderer)
{
	SDL_Event event;
	bool controle = true;

	SDL_Texture* controle_Texture = load_texture("imagens/controles.png", window_Renderer);
	SDL_RenderCopy(window_Renderer, controle_Texture, NULL, NULL);

	while (controle)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0)
		{
			//Evento: Fechar janela | Evento: qualquer tecla pressionada | Evento: qualquer botçao do mause pressionado
			if (event.type == SDL_QUIT || event.type == SDL_KEYDOWN || event.type == SDL_MOUSEBUTTONDOWN)
			{
				controle = false;
			}
		} // Fim do loop de eventos
	}// Fim do while(controle)

	// Finalização dos créditos
	SDL_DestroyTexture(controle_Texture);

	controle_Texture = NULL;

} // Fim da função de controle


void settings(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Texture* seta_Menu_Texture, SDL_Rect seta_Clip[], SDL_Texture* background_Texture, bool* som_Ligado)
{
	SDL_Texture* botoes_Texture = load_texture("imagens/botoes settings.png", window_Renderer);

	SDL_Rect botoes_Apagados_Rect;
	botoes_Apagados_Rect.x = (window_Surface->w) / 4;
	botoes_Apagados_Rect.y = (window_Surface->h) / 2;
	botoes_Apagados_Rect.w = 80 * 7;
	botoes_Apagados_Rect.h = 48 * 7;

	SDL_Rect botoes_Apagados_Clip;
	botoes_Apagados_Clip.x = 0;
	botoes_Apagados_Clip.y = 0;
	botoes_Apagados_Clip.w = 80;
	botoes_Apagados_Clip.h = 48;

	SDL_Rect botao_Acesso_Rect;
	botao_Acesso_Rect.x = (window_Surface->w) / 4;
	botao_Acesso_Rect.y = (window_Surface->h) / 2;
	botao_Acesso_Rect.w = 80 * 7;
	botao_Acesso_Rect.h = 16 * 7;

	SDL_Rect botao_Acesso_Clip;
	botao_Acesso_Clip.x = 0;
	botao_Acesso_Clip.y = 48;
	botao_Acesso_Clip.w = 80;
	botao_Acesso_Clip.h = 16;

	// ------------------------------- //

	SDL_Texture* botao_Voltar_Texture = load_texture("imagens/botao voltar.png", window_Renderer);

	SDL_Rect botao_Voltar_Rect;
	botao_Voltar_Rect.x = 0;
	botao_Voltar_Rect.y = 0;
	botao_Voltar_Rect.h = 16 * 5;
	botao_Voltar_Rect.w = 48 * 5;

	// ------------------------------- //

	SDL_Rect seta_Rect;
	seta_Rect.x = (window_Surface->w) / 4 - 16 * 5;
	seta_Rect.y = (window_Surface->h) / 2;
	seta_Rect.w = 16 * 5;
	seta_Rect.h = 16 * 5;

	// ------------------------------- //

	// Descobre qual textura do som:ON/OFF deve aparecer
	if (!(*som_Ligado))
	{
		alterar_retangulo(&botoes_Apagados_Clip, +(5 * 16), 0, 0, 0);
		alterar_retangulo(&botao_Acesso_Clip, +(5 * 16), 0, 0, 0);
	}

	// ------------------------------- //

	int seta_Posicao = 0;
	int seta_Sprite = 1;

	SDL_Event event;
	bool settings = true;

	while (settings)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				settings = false;
			}
			// Evento: tecla pressionada
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_DOWN:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 16 * 7;
						seta_Posicao += 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, +(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, +(16), 0, 0);
					}
					break;

				case SDLK_UP:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 16 * 7;
						seta_Posicao -= 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, -(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, -(16), 0, 0);
					}
					break;

				case SDLK_s:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 120;
						seta_Posicao += 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, +(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, +(16), 0, 0);
					}
					break;

				case SDLK_w:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 120;
						seta_Posicao -= 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, -(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, -(16), 0, 0);
					}
					break;

				case SDLK_RETURN:
					switch (seta_Posicao)
					{
					case 0:
						if (*som_Ligado)
						{
							alterar_retangulo(&botoes_Apagados_Clip, +(5 * 16), 0, 0, 0);
							alterar_retangulo(&botao_Acesso_Clip, +(5 * 16), 0, 0, 0);

							(*som_Ligado) = false;
						}
						else
						{
							alterar_retangulo(&botoes_Apagados_Clip, -(5 * 16), 0, 0, 0);
							alterar_retangulo(&botao_Acesso_Clip, -(5 * 16), 0, 0, 0);

							(*som_Ligado) = true;
						}

						break;

					case 1:
						creditos(window_Renderer);
						break;

					case 2:
						controle(window_Renderer);
						break;
					}

					break;

				case SDLK_SPACE:
					switch (seta_Posicao)
					{
					case 0:
						if (*som_Ligado)
						{
							alterar_retangulo(&botoes_Apagados_Clip, +(5 * 16), 0, 0, 0);
							alterar_retangulo(&botao_Acesso_Clip, +(5 * 16), 0, 0, 0);

							(*som_Ligado) = false;
						}
						else
						{
							alterar_retangulo(&botoes_Apagados_Clip, -(5 * 16), 0, 0, 0);
							alterar_retangulo(&botao_Acesso_Clip, -(5 * 16), 0, 0, 0);

							(*som_Ligado) = true;
						}
						break;

					case 1:
						creditos(window_Renderer);
						break;

					case 2:
						controle(window_Renderer);
						break;
					}

					break;

				case SDLK_ESCAPE:

					settings = false;

					break;
				}
			} // Fim do switch das teclas
		} // Fim do loop de eventos

		SDL_RenderCopy(window_Renderer, background_Texture, NULL, NULL);
		SDL_RenderCopy(window_Renderer, botao_Voltar_Texture, NULL, &botao_Voltar_Rect);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botoes_Apagados_Clip, &botoes_Apagados_Rect);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botao_Acesso_Clip, &botao_Acesso_Rect);
		SDL_RenderCopy(window_Renderer, seta_Menu_Texture, &seta_Clip[seta_Sprite / 32], &seta_Rect);

		seta_Sprite += 1;

		if (seta_Sprite / 256 == 1)
		{
			seta_Sprite = 0;
		}


	} // Fim do while(settings)


	// Finalizando das settings
	SDL_DestroyTexture(botao_Voltar_Texture);
	SDL_DestroyTexture(botoes_Texture);

	botoes_Texture = NULL;
	botao_Voltar_Texture = NULL;

} // Fim da função settings


void menu(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, bool* load_game, bool* som_Ligado)
{
	SDL_Texture* background_Texture = load_texture("imagens/bg menu.png", window_Renderer);

	// ------------------------------- //

	SDL_Texture* seta_Menu_Texture = load_texture("imagens/seta menu.png", window_Renderer);

	SDL_Rect seta_Rect; // Rect do local onde a setinha será renderizada
	seta_Rect.x = (window_Surface->w) / 4 - 16 * 5;
	seta_Rect.y = (window_Surface->h) / 2;
	seta_Rect.w = 16 * 5;
	seta_Rect.h = 16 * 5;

	SDL_Rect seta_Clip[8]; // Rect (clip) do sprite da seta
	for (int i = 0; i < 8; i++)
	{
		seta_Clip[i].x = 16 * i;
		seta_Clip[i].y = 0;
		seta_Clip[i].w = 16;
		seta_Clip[i].h = 16;
	}

	// ------------------------------- //

	SDL_Texture* botoes_Texture = load_texture("imagens/botoes menu.png", window_Renderer);

	SDL_Rect botoes_Apagados_Rect; // Rect do local onde os botões serão renderizados
	botoes_Apagados_Rect.x = (window_Surface->w) / 4;
	botoes_Apagados_Rect.y = (window_Surface->h) / 2;
	botoes_Apagados_Rect.w = 80 * 7;
	botoes_Apagados_Rect.h = 48 * 7;

	SDL_Rect botoes_Apagados_Clip; // Rect (clip) para todos os botões apagados
	botoes_Apagados_Clip.x = 0;
	botoes_Apagados_Clip.y = 0;
	botoes_Apagados_Clip.w = 80;
	botoes_Apagados_Clip.h = 48;

	SDL_Rect botao_Acesso_Rect;
	botao_Acesso_Rect.x = (window_Surface->w) / 4;
	botao_Acesso_Rect.y = (window_Surface->h) / 2 + (16 * 7 * 0);
	botao_Acesso_Rect.w = 80 * 7;
	botao_Acesso_Rect.h = 16 * 7;

	SDL_Rect botao_Acesso_Clip;
	botao_Acesso_Clip.x = 0;
	botao_Acesso_Clip.y = 48 + 16 * 0;
	botao_Acesso_Clip.w = 80;
	botao_Acesso_Clip.h = 16;



	// ------------------------------- //

	int seta_Posicao = 0;
	int seta_Sprite = 1;

	SDL_Event event;
	bool menu = true;

	while (menu)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				menu = false;
			}
			// Evento: tecla pressionada
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_DOWN:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 120;
						seta_Posicao += 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, +(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, +(16), 0, 0);
					}
					break;

				case SDLK_UP:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 120;
						seta_Posicao -= 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, -(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, -(16), 0, 0);
					}
					break;

				case SDLK_s:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 120;
						seta_Posicao += 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, +(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, +(16), 0, 0);
					}
					break;

				case SDLK_w:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 120;
						seta_Posicao -= 1;

						alterar_retangulo(&botao_Acesso_Rect, 0, -(16 * 7), 0, 0);
						alterar_retangulo(&botao_Acesso_Clip, 0, -(16), 0, 0);
					}
					break;

				case SDLK_RETURN:
					// swittch que desfine a escolha do jogador em relação aos botões
					switch (seta_Posicao) // 0 - New game | 1 - Load game | 2 - settings
					{
					case 0:
						menu = false;
						break;
					case 1:
						menu = false;
						(*load_game) = true;
						break;
					case 2:
						settings(window_Renderer, window_Surface, seta_Menu_Texture, seta_Clip, background_Texture, som_Ligado);
						break;
					}
					break;

				case SDLK_SPACE:
					// swittch que desfine a escolha do jogador em relação aos botões
					switch (seta_Posicao) // 0 - New game | 1 - Load game | 2 - settings
					{
					case 0:
						menu = false;
						break;
					case 1:
						menu = false;
						(*load_game) = true;
						break;
					case 2:
						SDL_RenderCopy(window_Renderer, background_Texture, NULL, NULL);
						settings(window_Renderer, window_Surface, seta_Menu_Texture, seta_Clip, background_Texture, som_Ligado);
						break;
					}
					break;
				}
			} // Fim do switch das teclas
		} // Fim do loop de eventos

		SDL_RenderCopy(window_Renderer, background_Texture, NULL, NULL);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botoes_Apagados_Clip, &botoes_Apagados_Rect);
		SDL_RenderCopy(window_Renderer, seta_Menu_Texture, &seta_Clip[seta_Sprite / 32], &seta_Rect);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botao_Acesso_Clip, &botao_Acesso_Rect);

		seta_Sprite += 1;

		if (seta_Sprite / 256 == 1)
		{
			seta_Sprite = 0;
		}

	} // fim do while(menu)

	// Finalizando o menu
	SDL_DestroyTexture(background_Texture);
	SDL_DestroyTexture(botoes_Texture);
	SDL_DestroyTexture(seta_Menu_Texture);

	background_Texture = NULL;
	botoes_Texture = NULL;
	seta_Menu_Texture = NULL;

} // fim da função menu



// --------------------------------------------------------------------------------------- //


void escolher_dificuldade(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, int* dificuldade)
{
	SDL_Texture* dificulty_Texture = load_texture("imagens/bg dificuldade.png", window_Renderer); //textura do background de dificuldade

	bool new_game = true;
	int seta_Posicao = 0;
	int seta_Sprite = 1;
	SDL_Event event;

	//-----------------------------//

	SDL_Texture* seta_Menu_Texture = load_texture("imagens/seta menu.png", window_Renderer);

	SDL_Rect seta_Rect; // Rect do local onde a setinha será renderizada
	seta_Rect.x = (window_Surface->w) / 4 - 16 * 5;
	seta_Rect.y = (window_Surface->h) / 2;
	seta_Rect.w = 16 * 5;
	seta_Rect.h = 16 * 5;

	SDL_Rect seta_Clip[8]; // Rect (clip) do sprite da seta
	for (int i = 0; i < 8; i++)
	{
		seta_Clip[i].x = 16 * i;
		seta_Clip[i].y = 0;
		seta_Clip[i].w = 16;
		seta_Clip[i].h = 16;
	}

	//----------------------------//

	SDL_Texture* botoes_Texture = load_texture("imagens/botoes dificuldade.png", window_Renderer);

	SDL_Rect botoes_Apagados_Rect; // Rect do local onde os botões serão renderizados
	botoes_Apagados_Rect.x = (window_Surface->w) / 4;
	botoes_Apagados_Rect.y = (window_Surface->h) / 2;
	botoes_Apagados_Rect.w = 80 * 7;
	botoes_Apagados_Rect.h = 48 * 7;

	SDL_Rect botoes_Apagados_Clip; // Rect (clip) para todos os botões apagados
	botoes_Apagados_Clip.x = 0;
	botoes_Apagados_Clip.y = 0;
	botoes_Apagados_Clip.w = 80;
	botoes_Apagados_Clip.h = 48;

	SDL_Rect botoes_Acessos_Rect[3]; // Array de rects do local onde o botão acesso acesso será renderizado
	for (int i = 0; i < 3; i++)
	{
		botoes_Acessos_Rect[i].x = (window_Surface->w) / 4;
		botoes_Acessos_Rect[i].y = (window_Surface->h) / 2 + (16 * 7 * i);
		botoes_Acessos_Rect[i].w = 80 * 7;
		botoes_Acessos_Rect[i].h = 16 * 7;
	}

	SDL_Rect botoes_Acessos_Clip[3]; // Array de Rects, um para cada botão acesso
	for (int i = 0; i < 3; i++)
	{
		botoes_Acessos_Clip[i].x = 0;
		botoes_Acessos_Clip[i].y = 48 + 16 * i;
		botoes_Acessos_Clip[i].w = 80;
		botoes_Acessos_Clip[i].h = 16;
	}

	// ------------------------------- //

	while (new_game)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				new_game = false;
			}
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym) // Evento: tecla pressionada
				{
				case SDLK_DOWN:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 120;
						seta_Posicao += 1;
					}
					break;

				case SDLK_UP:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 120;
						seta_Posicao -= 1;
					}
					break;
				case SDLK_s:
					if (seta_Posicao + 1 <= 2)
					{
						seta_Rect.y += 120;
						seta_Posicao += 1;
					}
					break;

				case SDLK_w:
					if (seta_Posicao - 1 >= 0)
					{
						seta_Rect.y -= 120;
						seta_Posicao -= 1;
					}
					break;
				case SDLK_RETURN:
					new_game = false;
					switch (seta_Posicao) //seta varia de 0 a 2
					{
					case 0:
						*dificuldade = 0; //facil
						break;

					case 1:
						*dificuldade = 20; //medio
						break;

					case 2:
						*dificuldade = 40; //dificil
						break;
					}
					break;

				case SDLK_SPACE:
					new_game = false;
					switch (seta_Posicao) //seta varia de 0 a 2
					{
					case 0:
						*dificuldade = 0; //facil
						break;

					case 1:
						*dificuldade = 20; //medio
						break;

					case 2:
						*dificuldade = 40; //dificil
						break;
					}
					break;
				}
			}

		} // Fim do loop de eventos

		SDL_RenderCopy(window_Renderer, dificulty_Texture, NULL, NULL);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botoes_Apagados_Clip, &botoes_Apagados_Rect);
		SDL_RenderCopy(window_Renderer, seta_Menu_Texture, &seta_Clip[seta_Sprite / 32], &seta_Rect);
		SDL_RenderCopy(window_Renderer, botoes_Texture, &botoes_Acessos_Clip[seta_Posicao], &botoes_Acessos_Rect[seta_Posicao]);

		seta_Sprite += 1;

		if (seta_Sprite / 256 == 1)
		{
			seta_Sprite = 0;
		}
	} // fim do while(new_game)
	
	  
	// Finalizando a escolha de dificuldades
	SDL_DestroyTexture(dificulty_Texture);
	SDL_DestroyTexture(botoes_Texture);
	SDL_DestroyTexture(seta_Menu_Texture);

	dificulty_Texture = NULL;
	botoes_Texture = NULL;
	seta_Menu_Texture = NULL;

}// Fim da função escolha_dificuldade()


void inicio_jornal(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface)
{
	SDL_Texture* jornal_Texture = load_texture("imagens/jornal detetive 1.png", window_Renderer);

	bool Inicio_jornal = true;
	SDL_Event event;

	while (Inicio_jornal)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				Inicio_jornal = false;
			}
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)// Evento: tecla pressionada
				{
				case SDLK_RETURN:
					Inicio_jornal = false;
					break;

				case SDLK_SPACE:
					Inicio_jornal = false;
					break;
				}
			}

		} // Fim do loop de eventos

		SDL_RenderCopy(window_Renderer, jornal_Texture, NULL, NULL);

	} // fim do while(inicio_jornal)

	SDL_DestroyTexture(jornal_Texture);

	jornal_Texture = NULL;

}// Finalizando o inicio_jornal


// --------------------------------------------------------------------------------------- //


void escolha_cenarios(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, int dificuldade, bool som_Ligado)
{
	// mini_game(window_Renderer, main_Surface, &som_Ligado);  <---- eh assim que chama a função do mini jogo
	
	SDL_Texture* cidade_Texture = load_texture("imagens/cidade otimizada.png", window_Renderer);

	SDL_Texture* contorno_Delegacia_Texture = load_texture("imagens/contorno delegacia.png", window_Renderer);
	SDL_Texture* contorno_1_Texture = load_texture("imagens/contorno casa 1.png", window_Renderer);
	SDL_Texture* contorno_2_Texture = load_texture("imagens/contorno casa 2.png", window_Renderer);
	SDL_Texture* contorno_3_Texture = load_texture("imagens/contorno casa 3.png", window_Renderer);
	SDL_Texture* contorno_4_Texture = load_texture("imagens/contorno casa 4.png", window_Renderer);
	
	
	int lugar = 0; //lugar vai de 0 a 4 // 0 = delegacia // 1 = cenario 1 // 2 = cenario 2 // 3 = cenario 3 // 4 = cenario 4
	bool escolha_Cenarios = true;
	SDL_Event event;


	while (escolha_Cenarios)
	{
		SDL_RenderPresent(window_Renderer);
		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				escolha_Cenarios = false;
			}
			// Evento: tecla pressionada
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_a:
					if (lugar - 1 < 0)
					{
						lugar = 4;
					}
					else
					{
						lugar--;
					}
					break;

				case SDLK_d:
					if (lugar + 1 > 4)
					{
						lugar = 0;
					}
					else
					{
						lugar++;
					}
					break;
				case SDLK_LEFT:
					if (lugar - 1 < 0)
					{
						lugar = 4;
					}
					else
					{
						lugar--;
					}
					break;

				case SDLK_RIGHT:
					if (lugar + 1 > 4)
					{
						lugar = 0;
					}
					else
					{
						lugar++;
					}
					break;

				case SDLK_RETURN:

					switch (lugar)
					{
					case 0:
						escolha_Cenarios = false;
						break;
					case 1:
						// cahcne de emboscada aki
						// função do cenario 1

						break;
					case 2:
						// cahcne de emboscada aki
						// função do cenario 2

						break;
					case 3:
						// cahcne de emboscada aki
						// função do cenario 3

						break;
					case 4:
						// cahcne de emboscada aki
						// função do cenario 4

						break;
					}
					break;

				case SDLK_SPACE:

					switch (lugar)
					{
					case 0:
						escolha_Cenarios = false;
						break;
					case 1:
						// cahcne de emboscada aki
						// função do cenario 1

						break;
					case 2:
						// cahcne de emboscada aki
						// função do cenario 2

						break;
					case 3:
						// cahcne de emboscada aki
						// função do cenario 3

						break;
					case 4:
						// cahcne de emboscada aki
						// função do cenario 4

						break;
					}
					break;
				}

			} // Fim do evento de tecla pressionada

		}// Fim do loop de eventos

		SDL_RenderCopy(window_Renderer, cidade_Texture, NULL, NULL);

		if (lugar == 0)
		{
			SDL_RenderCopy(window_Renderer, contorno_Delegacia_Texture, NULL, NULL);
		}
		else if (lugar == 1)
		{
			SDL_RenderCopy(window_Renderer, contorno_1_Texture, NULL, NULL);
		}
		else if (lugar == 2)
		{
			SDL_RenderCopy(window_Renderer, contorno_2_Texture, NULL, NULL);
		}
		else if (lugar == 3)
		{
			SDL_RenderCopy(window_Renderer, contorno_3_Texture, NULL, NULL);
		}
		else if (lugar == 4)
		{
			SDL_RenderCopy(window_Renderer, contorno_4_Texture, NULL, NULL);
		}
		

	}//fim do while(escolha_Cenario) 

	SDL_DestroyTexture(cidade_Texture);

	SDL_DestroyTexture(contorno_Delegacia_Texture);
	SDL_DestroyTexture(contorno_1_Texture);
	SDL_DestroyTexture(contorno_2_Texture);
	SDL_DestroyTexture(contorno_3_Texture);
	SDL_DestroyTexture(contorno_4_Texture);

	cidade_Texture = NULL;

	contorno_Delegacia_Texture = NULL;
	contorno_1_Texture = NULL;
	contorno_2_Texture = NULL;
	contorno_3_Texture = NULL;
	contorno_4_Texture = NULL;

} // fim da função de esolher cenário


void mini_game(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, bool* som_Ligado)
{
	const int velAsssassino = 75; //delay para retardar o movimento do assassino
	const int quantBlocos = 20; //quantidade de blocos a serem criados

	const int SCREEN_WIDTH = 1280;
	const int SCREEN_HEIGHT = 720;

	SDL_Texture* gTexture = NULL;
	SDL_Texture* detetive1 = NULL;
	SDL_Texture* detetive2 = NULL;
	SDL_Texture* detetive3 = NULL;
	SDL_Texture* detetive4 = NULL;
	SDL_Texture* detetive5 = NULL;
	SDL_Texture* detetive6 = NULL;
	SDL_Texture* detetive7 = NULL;
	SDL_Texture* assassino1 = NULL;
	SDL_Texture* assassino2 = NULL;
	SDL_Texture* assassino3 = NULL;
	SDL_Texture* obst = NULL;
	SDL_Texture* barraDeLife1 = NULL;
	SDL_Texture* barraDeLife2 = NULL;
	SDL_Texture* barraDeLife3 = NULL;
	SDL_Texture* barraDeLife4 = NULL;
	SDL_Texture* barraDeLife5 = NULL;
	SDL_Texture* projetil = NULL;


	detetive1 = load_texture("imagens/detetive1.png", window_Renderer);
	detetive2 = load_texture("imagens/detetive2.png", window_Renderer);
	detetive3 = load_texture("imagens/detetive3.png", window_Renderer);
	detetive4 = load_texture("imagens/detetive4.png", window_Renderer);
	detetive5 = load_texture("imagens/detetive5.png", window_Renderer);
	detetive6 = load_texture("imagens/detetive6.png", window_Renderer);
	detetive7 = load_texture("imagens/detetive7.png", window_Renderer);
	assassino1 = load_texture("imagens/assassino1.png", window_Renderer);
	assassino2 = load_texture("imagens/assassino2.png", window_Renderer);
	assassino3 = load_texture("imagens/assassino3.png", window_Renderer);
	obst = load_texture("imagens/obstaculo.png", window_Renderer);
	barraDeLife1 = load_texture("imagens/barradelife1.png", window_Renderer);
	barraDeLife2 = load_texture("imagens/barradelife2.png", window_Renderer);
	barraDeLife3 = load_texture("imagens/barradelife3.png", window_Renderer);
	barraDeLife4 = load_texture("imagens/barradelife4.png", window_Renderer);
	barraDeLife5 = load_texture("imagens/barradelife5.png", window_Renderer);
	projetil = load_texture("imagens/tiro.png", window_Renderer);


	//contadores de vida
	int vidaDetetive = 4;
	int vidaAssassino = 4;

	//booleanas de movimento
	bool esq = false;
	bool dir = false;
	bool atirar = false;

	SDL_bool colIniBloq[quantBlocos];
	SDL_bool colProjIni;

	//contadores de frames
	int frameAtual = 0;
	int frameDetetive = 0;
	int qtdFrame = 3;


	//randoniza a posição X do assassino
	srand(time(NULL));

	//função booleana de execução do loop e criação da variavel atribuida a eventos
	bool executando = true;
	SDL_Event click;

	//--Area de criação de retangulos :D --//

	SDL_Rect detetiveRect;
	detetiveRect.x = SCREEN_WIDTH / 2 - 25;
	detetiveRect.y = SCREEN_HEIGHT - 50;
	detetiveRect.w = 50;
	detetiveRect.h = 50;

	SDL_Rect assassinoRect;
	assassinoRect.x = rand() % 1029 - rand() % 1029;
	while (assassinoRect.x < 0)
	{
		assassinoRect.x = rand() % 1029 - rand() % 1029;
	}
	assassinoRect.y = 0;
	assassinoRect.w = 50;
	assassinoRect.h = 50;

	float velMovAssassinoX = 8;
	float velMovAssassinoY = 8;


	bool blocoViVo[quantBlocos];
	for (int i = 0; i < quantBlocos; i++)
	{
		blocoViVo[i] = true;
	}
	SDL_Rect obstaculosRect[quantBlocos];
	for (int i = 0, x = 4, y = 150; i < quantBlocos; i++, x += 250)
	{
		if (blocoViVo[i] == true)
		{
			if (x > 1010)
			{
				x = 4;
				y += 150;
			}
			obstaculosRect[i].x = x;
			obstaculosRect[i].y = y;
			obstaculosRect[i].w = 60;
			obstaculosRect[i].h = 20;
		}
	}


	SDL_Rect lifeDetetiveRect;
	lifeDetetiveRect.x = 0;
	lifeDetetiveRect.y = 0;
	lifeDetetiveRect.w = 200;
	lifeDetetiveRect.h = 60;

	SDL_Rect lifeAssassinoRect;
	lifeAssassinoRect.x = 880;
	lifeAssassinoRect.y = 0;
	lifeAssassinoRect.w = 200;
	lifeAssassinoRect.h = 60;

	SDL_Rect projetilRect;
	SDL_Rect projetilRectCopia;
	bool projetilVida = true;

	float velProjetil = 20;


	//--fim da área de criação de retângulos--//

	//loop principal do jogo
	while (executando)
	{

		//eventos de comando do teclado/mouse
		while (SDL_PollEvent(&click))
		{
			//fechando a janela com ESC ou clique no X
			if (click.type == SDL_QUIT)
			{
				executando = false;
			}

			switch (click.key.keysym.sym)
			{
			case SDLK_ESCAPE:
				executando = false;
			}

			if (click.type == SDL_KEYDOWN)
			{
				if (click.key.keysym.sym == SDLK_a)
				{
					esq = true;
				}
				else if (click.key.keysym.sym == SDLK_d)
				{
					dir = true;
				}
				else if (click.key.keysym.sym == SDLK_k)
				{
					if (projetilVida)
					{
						projetilRect.x = detetiveRect.x;
						projetilRect.y = SCREEN_HEIGHT - 50;
						projetilRect.w = 10;
						projetilRect.h = 20;

						projetilRectCopia = projetilRect;
					}

					atirar = true;
				}
			}
			else if (click.type == SDL_KEYUP)
				if (click.key.keysym.sym == SDLK_a)
				{
					esq = false;
				}
				else if (click.key.keysym.sym == SDLK_d)
				{
					dir = false;
				}
		}

		//---------------lógica----------------------//
		//------------------------------------------//

		//---DETETIVE---//

		//movimento do detetive
		if (esq == true)
		{
			detetiveRect.x -= 24;
		}
		else if (dir == true)
		{
			detetiveRect.x += 24;
		}

		//colisão do detetive com a tela
		if (detetiveRect.x < 0)
		{
			detetiveRect.x = 0;
		}
		else if (detetiveRect.x > SCREEN_WIDTH - detetiveRect.w)
		{
			detetiveRect.x = SCREEN_WIDTH - detetiveRect.w;
		}

		//--ASSASSINO--//

		//movimento do inimigo
		assassinoRect.x += velMovAssassinoX;
		assassinoRect.y += velMovAssassinoY;

		//colisão do inimigo com a tela
		if (assassinoRect.x < 0)
		{
			assassinoRect.x = 0;
			if (assassinoRect.x == 0)
			{
				velMovAssassinoX = -velMovAssassinoX;
			}
		}
		if (assassinoRect.x > SCREEN_WIDTH - assassinoRect.w)
		{
			assassinoRect.x = SCREEN_WIDTH - assassinoRect.w;
			if (assassinoRect.x == SCREEN_WIDTH - assassinoRect.w)
			{
				velMovAssassinoX = -velMovAssassinoX;
			}
		}
		if (assassinoRect.y < 0)
		{
			assassinoRect.y = 0;
			if (assassinoRect.y == 0)
			{
				velMovAssassinoY = -velMovAssassinoY;
			}
		}
		if (assassinoRect.y > SCREEN_HEIGHT - assassinoRect.h)
		{
			assassinoRect.y = SCREEN_HEIGHT - assassinoRect.h;
			if (assassinoRect.y == SCREEN_HEIGHT - assassinoRect.h)
			{
				velMovAssassinoY = -velMovAssassinoY;
			}
		}

		//--PROJETIL--//

		// posição do projetil
		if (atirar == false)
		{
			projetilRect.x = detetiveRect.x;
		}

		//movimento do projetil

		if (atirar == true)
		{
			if (projetilRect.y > 0)
			{
				projetilRect.y = projetilRect.y - velProjetil;
				projetilRectCopia.y = projetilRect.y - velProjetil;
			}
			else if (projetilRect.y <= 0)
			{
				projetilRect.y = SCREEN_HEIGHT - 50;
				projetilRectCopia.y = SCREEN_HEIGHT - 50;
				projetilVida = false;
				atirar = false;
			}
		}


		//--COLISÕES--//

		//colisão do inimigo com o detetive
		SDL_bool colIniDet = SDL_HasIntersection(&assassinoRect, &detetiveRect);

		if (colIniDet)
		{
			velMovAssassinoX = velMovAssassinoX;
			velMovAssassinoY = -velMovAssassinoY;

			vidaDetetive--;

			if (vidaDetetive == 0)
			{
				executando = false;
			}
		}

		//colisão do inimigo com os obstaculos

		for (int i = 0; i < quantBlocos; i++)
		{
			colIniBloq[i] = (SDL_bool)true;
		}

		for (int i = 0; i < quantBlocos; i++)
		{
			colIniBloq[i] = SDL_HasIntersection(&assassinoRect, &obstaculosRect[i]);
		}

		for (int i = 0; i < quantBlocos; i++)
		{
			if (colIniBloq[i] == true)
			{
				if (blocoViVo[i] == true)
				{
					velMovAssassinoX = velMovAssassinoX * 1.1;
					velMovAssassinoY = -velMovAssassinoY * 1.1;

					blocoViVo[i] = false;
				}
			}
		}

		//colisão projetil com inimigo

		colProjIni = SDL_HasIntersection(&projetilRect, &assassinoRect);

		if (colProjIni)
		{
			projetilRect.y = SCREEN_HEIGHT - 50;

			atirar = false;

			vidaAssassino--;
			if (vidaAssassino <= 0)
			{
				vidaAssassino = 0;
				executando = false;
			}
		}


		//--------renderização---------//
		//----------------------------//

		//limpa a renderização
		SDL_RenderClear(window_Renderer);

		//renderiza a textura na tela
		SDL_RenderCopy(window_Renderer, gTexture, NULL, NULL);


		if (esq)
		{
			switch (frameDetetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive2, NULL, &detetiveRect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive3, NULL, &detetiveRect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive4, NULL, &detetiveRect);
				break;
			}
		}
		else if (dir)
		{
			switch (frameDetetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive5, NULL, &detetiveRect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive6, NULL, &detetiveRect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive7, NULL, &detetiveRect);
				break;
			}
		}
		else
		{
			SDL_RenderCopy(window_Renderer, detetive1, NULL, &detetiveRect);
		}

		switch (frameAtual)
		{
		case 0:
			SDL_RenderCopy(window_Renderer, assassino1, NULL, &assassinoRect);
			break;
		case 1:
			SDL_RenderCopy(window_Renderer, assassino2, NULL, &assassinoRect);
			break;
		case 2:
			SDL_RenderCopy(window_Renderer, assassino3, NULL, &assassinoRect);
			break;
		}

		for (int i = 0; i < quantBlocos; i++)
		{
			if (blocoViVo[i] == true)
			{
				SDL_RenderCopy(window_Renderer, obst, NULL, &obstaculosRect[i]);
			}
		}

		switch (vidaDetetive)
		{
		case 4:
			SDL_RenderCopy(window_Renderer, barraDeLife1, NULL, &lifeDetetiveRect);
			break;
		case 3:
			SDL_RenderCopy(window_Renderer, barraDeLife2, NULL, &lifeDetetiveRect);
			break;
		case 2:
			SDL_RenderCopy(window_Renderer, barraDeLife3, NULL, &lifeDetetiveRect);
			break;
		case 1:
			SDL_RenderCopy(window_Renderer, barraDeLife4, NULL, &lifeDetetiveRect);
			break;
		case 0:
			SDL_RenderCopy(window_Renderer, barraDeLife5, NULL, &lifeDetetiveRect);
			break;
		}
		
		switch (vidaAssassino)
		{
		case 4:
			SDL_RenderCopy(window_Renderer, barraDeLife1, NULL, &lifeAssassinoRect);
			break;
		case 3:
			SDL_RenderCopy(window_Renderer, barraDeLife2, NULL, &lifeAssassinoRect);
			break;
		case 2:
			SDL_RenderCopy(window_Renderer, barraDeLife3, NULL, &lifeAssassinoRect);
			break;
		case 1:
			SDL_RenderCopy(window_Renderer, barraDeLife4, NULL, &lifeAssassinoRect);
			break;
		case 0:
			SDL_RenderCopy(window_Renderer, barraDeLife5, NULL, &lifeAssassinoRect);
			break;
		}

		if (atirar == true)
		{
			if (projetilVida == true || 1)
			{
				SDL_RenderCopy(window_Renderer, projetil, NULL, &projetilRect);
			}
		}
		else if (atirar == false)
		{
			projetilVida == true;
		}


		//atualiza a renderização
		SDL_RenderPresent(window_Renderer);

		frameAtual++;
		if (frameAtual == 3)
			frameAtual = 0;

		frameDetetive++;
		if (frameDetetive == 3)
			frameDetetive = 0;



		SDL_Delay(velAsssassino);
	}

	// Finalização do mini_game()

	SDL_DestroyTexture(gTexture);
	SDL_DestroyTexture(detetive1);
	SDL_DestroyTexture(detetive2);
	SDL_DestroyTexture(detetive3);
	SDL_DestroyTexture(detetive4);
	SDL_DestroyTexture(detetive5);
	SDL_DestroyTexture(detetive6);
	SDL_DestroyTexture(detetive7);
	SDL_DestroyTexture(assassino1);
	SDL_DestroyTexture(assassino2);
	SDL_DestroyTexture(assassino3);
	SDL_DestroyTexture(obst);
	SDL_DestroyTexture(barraDeLife1);
	SDL_DestroyTexture(barraDeLife2);
	SDL_DestroyTexture(barraDeLife3);
	SDL_DestroyTexture(barraDeLife4);
	SDL_DestroyTexture(barraDeLife5);
	SDL_DestroyTexture(projetil);

	gTexture = NULL;
	detetive1 = NULL;
	detetive2 = NULL;
	detetive3 = NULL;
	detetive4 = NULL;
	detetive5 = NULL;
	detetive6 = NULL;
	detetive7 = NULL;
	assassino1 = NULL;
	assassino2 = NULL;
	assassino3 = NULL;
	obst = NULL;
	barraDeLife1 = NULL;
	barraDeLife2 = NULL;
	barraDeLife3 = NULL;
	barraDeLife4 = NULL;
	barraDeLife5 = NULL;
	projetil = NULL;

} // Fim da função mini_game()


// --------------------------------------------------------------------------------------- //

void cenario_delegacia(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Rect* main_Rect, bool load_game, int dificuldade, bool som_Ligado)
{

	coloca_fundo_preto(window_Renderer);

	int cenario_Width = 240;  //15x16
	int cenario_Height = 192; //12x16
	int amplificador = 3;
	int lado = 16;

	SDL_Rect cenario_Rect;
	cenario_Rect.x = 1280 / 2 - cenario_Width / 2 * amplificador;
	cenario_Rect.y = 720 / 2 - cenario_Height / 2 * amplificador;
	cenario_Rect.w = cenario_Width * amplificador;
	cenario_Rect.h = cenario_Height * amplificador;

	SDL_RenderSetViewport(window_Renderer, &cenario_Rect);

	SDL_Rect grid[12][15];

	for (int linha = 0; linha < 12; linha++)
	{
		for (int coluna = 0; coluna < 15; coluna++)
		{
			grid[linha][coluna].x = lado * amplificador * coluna;
			grid[linha][coluna].y = lado * amplificador * linha;
			grid[linha][coluna].w = lado * amplificador;
			grid[linha][coluna].h =	lado * amplificador;
		}
	}

	// ------------------------------- //

	char delegacia_Centro[12][15] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
								      ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
								      ' ', ' ', '_', '_', '_', '_', ' ', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
								      ' ', '_', '_', '_', '_', '_', ' ', ' ', ' ', '_', '_', '_', '_', '_', ' ',
								      '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
								      ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
								      ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
								      ' ', '_', '_', ' ', ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
								      ' ', '_', '_', ' ', ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
								      ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
								      ' ', ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ', ' ', ' ',
								      ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
									  
	char delegacia_Direita[12][15] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ', ' ', ' ',
									   ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
									   '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };

	char delegacia_Esquerda[12][15] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
									    ' ', ' ', ' ', ' ', ' ', '_', ' ', ' ', '_', ' ', ' ', ' ', ' ', ' ', ' ',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
									    ' ', ' ', ' ', ' ', '_', ' ', ' ', ' ', '_', ' ', ' ', ' ', '_', '_', ' ',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
									    ' ', ' ', ' ', ' ', '_', ' ', ' ', ' ', '_', ' ', ' ', ' ', '_', '_', ' ',
									    ' ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' ',
										' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};

	// ------------------------------- //

	SDL_Texture* background_Texture_Centro = load_texture("imagens/delegacia centro.png", window_Renderer);

	SDL_Texture* background_Texture_Direita = load_texture("imagens/delegacia direita.png", window_Renderer);

	SDL_Texture* background_Texture_Esquerda = load_texture("imagens/delegacia esquerda.png", window_Renderer);


	SDL_Texture* detetive_Costa_1_Texture = load_texture("imagens/detetive costa 1.png", window_Renderer);
	SDL_Texture* detetive_Costa_2_Texture = load_texture("imagens/detetive costa 2.png", window_Renderer);
	SDL_Texture* detetive_Costa_3_Texture = load_texture("imagens/detetive costa 3.png", window_Renderer);

	SDL_Texture* detetive_Frente_1_Texture = load_texture("imagens/detetive frente 1.png", window_Renderer);
	SDL_Texture* detetive_Frente_2_Texture = load_texture("imagens/detetive frente 2.png", window_Renderer);
	SDL_Texture* detetive_Frente_3_Texture = load_texture("imagens/detetive frente 3.png", window_Renderer);

	SDL_Texture* detetive_Lado_Direito_1_Texture = load_texture("imagens/detetive lado dir 1.png", window_Renderer);
	SDL_Texture* detetive_Lado_Direito_2_Texture = load_texture("imagens/detetive lado dir 2.png", window_Renderer);
	SDL_Texture* detetive_Lado_Direito_3_Texture = load_texture("imagens/detetive lado dir 3.png", window_Renderer);

	SDL_Texture* detetive_Lado_Esquerdo_1_Texture = load_texture("imagens/detetive lado esq 1.png", window_Renderer);
	SDL_Texture* detetive_Lado_Esquerdo_2_Texture = load_texture("imagens/detetive lado esq 2.png", window_Renderer);
	SDL_Texture* detetive_Lado_Esquerdo_3_Texture = load_texture("imagens/detetive lado esq 3.png", window_Renderer);
	

	SDL_Texture* planta_Texture = load_texture("imagens/vaso de planta.png", window_Renderer);

	SDL_Rect planta_Direita_Rect; // lugar da planta direita inferior
	planta_Direita_Rect.x = grid[9][13].x;
	planta_Direita_Rect.y = grid[9][13].y;
	planta_Direita_Rect.w = 16 * amplificador;
	planta_Direita_Rect.h = 32 * amplificador;

	SDL_Rect planta_Esquerda_Rect; // lugar da planta da esquerda inferior
	planta_Esquerda_Rect.x = grid[9][1].x;
	planta_Esquerda_Rect.y = grid[9][1].y;
	planta_Esquerda_Rect.w = 16 * amplificador;
	planta_Esquerda_Rect.h = 32 * amplificador;

	SDL_Texture* lixeira_Texture = load_texture("imagens/lixeira.png", window_Renderer);

	SDL_Rect lixeira_Rect; // lugar do lixo
	lixeira_Rect.x = grid[9][12].x;
	lixeira_Rect.y = grid[9][12].y;
	lixeira_Rect.w = 16 * amplificador;
	lixeira_Rect.h = 32 * amplificador;

	SDL_Texture* bancadas_Texture = load_texture("imagens/delegacia esquerda bancadas.png", window_Renderer);

	// ------------------------------- //

	SDL_Rect detetive_Rect; // falta depender de onde veio
	detetive_Rect.x = grid[9][7].x -16;
	detetive_Rect.y = grid[9][7].y -16;
	detetive_Rect.w = 64;
	detetive_Rect.h = 64;

	SDL_Rect detetive_Rect_Hitbox = detetive_Rect;
	detetive_Rect_Hitbox.x += detetive_Rect.w/2;
	detetive_Rect_Hitbox.w /= 48;
	detetive_Rect_Hitbox.y += detetive_Rect.h/2;
	detetive_Rect_Hitbox.h /= 48;

	SDL_Rect texto_Rect;
	texto_Rect.x = cenario_Width / 2 - 200;
	texto_Rect.y = cenario_Height / 2 - 100;
	texto_Rect.w = 400;
	texto_Rect.h = 200;

	// ------------------------------- //

	// booleanas de movimento
	bool esq = false;
	bool dir = false;
	bool cima = false;
	bool baixo = false;

	// contadores de frames
	int frame_Detetive = 0;

	int sobe = 0;
	int esquerda = 0;
	int desce = 0;
	int direita = 0;

	char detetive = 'D';
	int detetive_Linha = 5;
	int detetive_Coluna = 7;

	int detetive_Lado = 3; // WASD = 1234 respectivamente

	int num_cenario = 1; // 0 = esquerda  | 1 = centro | 2 = direita

	SDL_Event event;
	bool cenario = true;

	SDL_RenderCopy(window_Renderer, background_Texture_Centro, NULL, NULL);
	SDL_RenderCopy(window_Renderer, detetive_Costa_1_Texture, NULL, &detetive_Rect);

	SDL_Texture* hitbox_Texture = load_texture("imagens/fundo preto.png", window_Renderer);

	while (cenario)
	{
		SDL_RenderCopy(window_Renderer, hitbox_Texture, NULL, &detetive_Rect_Hitbox);

		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event))
		{
			if (event.type == SDL_QUIT)
			{
				cenario = false;
			}
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_ESCAPE:
					cenario = false;
					break;

				case SDLK_w:
					cima = true;

					detetive_Rect_Hitbox.y = detetive_Rect.y + detetive_Rect.h * 3 / 4;
					break;

				case SDLK_a:
					esq = true;

					detetive_Rect_Hitbox.x = detetive_Rect.x + detetive_Rect.w * 3 / 4;
					break;

				case SDLK_s:
					baixo = true;

					detetive_Rect_Hitbox.y = detetive_Rect.y + detetive_Rect.h / 4;
					break;

				case SDLK_d:
					dir = true;

					detetive_Rect_Hitbox.x = detetive_Rect.x + detetive_Rect.w / 4;
					break;

				case SDLK_k:
					break;

				}
			}
			else if (event.type == SDL_KEYUP)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_w:
					cima = false;

					detetive_Lado = 1;

					detetive_Rect_Hitbox.y = detetive_Rect.y + detetive_Rect.h / 2;
					break;

				case SDLK_a:
					esq = false;

					detetive_Lado = 2;

					detetive_Rect_Hitbox.x = detetive_Rect.x + detetive_Rect.w / 2;
					break;

				case SDLK_s:
					baixo = false;

					detetive_Lado = 3;

					detetive_Rect_Hitbox.y = detetive_Rect.y + detetive_Rect.h / 2;
					break;

				case SDLK_d:
					dir = false;

					detetive_Lado = 4;

					detetive_Rect_Hitbox.x = detetive_Rect.x + detetive_Rect.w / 2;
					break;
				}
			}
		} // fim do loop de eventos


		// Coloca o detetive na matriz em função do seu retangulo no grid
		for (int linha = 0; linha < 12; linha++)
		{
			for (int coluna = 0; coluna < 15; coluna++)
			{
				if (SDL_HasIntersection(&detetive_Rect_Hitbox, &grid[linha][coluna]))
				{
					printf("detetive_Linha = %i \n", linha);
					printf("detetive_Coluna = %i \n\n", coluna);

					if (delegacia_Centro[linha][coluna] == '_')
					{
						if (num_cenario == 1) // Se está na delegacia centro
						{
							delegacia_Centro[linha][coluna] = detetive;
						}
						else if (num_cenario == 0) // Se o detetive está na delegacia esquerda
						{
							delegacia_Esquerda[linha][coluna] = detetive;
						}
						else if (num_cenario == 2) // Se o detetive está na delegacia direita
						{
							delegacia_Direita[linha][coluna] = detetive;
						}
					}

					detetive_Linha = linha;
					detetive_Coluna = coluna;
				}
				else
				{
					if (num_cenario == 1 && delegacia_Centro[linha][coluna] == 'D')
					{
						delegacia_Centro[linha][coluna] = '_';
					}
					else if (num_cenario == 0 && delegacia_Esquerda[linha][coluna] == 'D')
					{
						delegacia_Esquerda[linha][coluna] = '_';
					}
					else if (num_cenario == 2 && delegacia_Direita[linha][coluna] == 'D')
					{
						delegacia_Direita[linha][coluna] = '_';
					}
				}
			}
		}

		// Movimentação do detetive na matriz e cenário (delegacia centro)

		if (cima == true)
		{
			if (num_cenario == 1)
			{
				if (delegacia_Centro[detetive_Linha - 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y -= 8;
					detetive_Rect_Hitbox.y -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 0)
			{
				if (delegacia_Esquerda[detetive_Linha - 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y -= 8;
					detetive_Rect_Hitbox.y -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 2)
			{
				if (delegacia_Direita[detetive_Linha - 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y -= 8;
					detetive_Rect_Hitbox.y -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			
		}
		else if (esq == true)
		{
			if (num_cenario == 1)
			{
				if (delegacia_Centro[detetive_Linha][detetive_Coluna - 1] == '_')
				{
					detetive_Rect.x -= 8;
					detetive_Rect_Hitbox.x -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 0)
			{
				if (delegacia_Esquerda[detetive_Linha][detetive_Coluna - 1] == '_')
				{
					detetive_Rect.x -= 8;
					detetive_Rect_Hitbox.x -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 2)
			{
				if (delegacia_Direita[detetive_Linha][detetive_Coluna - 1] == '_')
				{
					detetive_Rect.x -= 8;
					detetive_Rect_Hitbox.x -= 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			
		}
		else if (baixo == true)
		{
			if (num_cenario == 1)
			{
				if (delegacia_Centro[detetive_Linha + 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y += 8;
					detetive_Rect_Hitbox.y += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 0)
			{
				if (delegacia_Esquerda[detetive_Linha + 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y += 8;
					detetive_Rect_Hitbox.y += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 2)
			{
				if (delegacia_Direita[detetive_Linha + 1][detetive_Coluna] == '_')
				{
					detetive_Rect.y += 8;
					detetive_Rect_Hitbox.y += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
		}
		else if (dir == true)
		{
			if (num_cenario == 1)
			{
				if (delegacia_Centro[detetive_Linha][detetive_Coluna + 1] == '_')
				{
					detetive_Rect.x += 8;
					detetive_Rect_Hitbox.x += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 0)
			{
				if (delegacia_Esquerda[detetive_Linha][detetive_Coluna + 1] == '_')
				{
					detetive_Rect.x += 8;
					detetive_Rect_Hitbox.x += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
			else if (num_cenario == 2)
			{
				if (delegacia_Direita[detetive_Linha][detetive_Coluna + 1] == '_')
				{
					detetive_Rect.x += 8;
					detetive_Rect_Hitbox.x += 8;

					delegacia_Centro[detetive_Linha][detetive_Coluna] = '_';
				}
			}
		}

		// Checa em que sala o detetive está e, em seguida, as suas coordenadas
		if (num_cenario == 1) // centro da delegacia
		{
			// Se o detetive estivar nessas coordenadas do mapa ele passa pra sala da esquerda delegacia
			if (detetive_Linha == 4 && detetive_Coluna == 0)
			{
				num_cenario = 0;

				detetive_Linha = 4;
				detetive_Coluna = 13;

				detetive_Rect.x = grid[4][13].x -16;
				detetive_Rect.y = grid[4][13].y -16;

				detetive_Rect_Hitbox.x = grid[4][13].x - 16 + detetive_Rect.w / 2;
				detetive_Rect_Hitbox.y = grid[4][13].y - 16 + detetive_Rect.h / 2;
			}
			// Se o detetive estiver nessas coordenadas do mapa ele passa pra sala da direita da delegacia
			else if(detetive_Linha == 4 && detetive_Coluna == 14)
			{
				num_cenario = 2;

				detetive_Linha = 4;
				detetive_Coluna = 1;

				detetive_Rect.x = grid[4][1].x -16;
				detetive_Rect.y = grid[4][1].y -16;

				detetive_Rect_Hitbox.x = grid[4][1].x - 16 + detetive_Rect.w / 2;
				detetive_Rect_Hitbox.y = grid[4][1].y - 16 + detetive_Rect.h / 2;
			}
			else if (detetive_Linha == 11 && detetive_Coluna == 7)
			{
				SDL_RenderSetViewport(window_Renderer, main_Rect);

				escolha_cenarios(window_Renderer, window_Surface, dificuldade, som_Ligado);

				coloca_fundo_preto(window_Renderer);

				SDL_RenderSetViewport(window_Renderer, &cenario_Rect);

				// ---- //

				cima = false; esq = false; baixo = false; dir = false; // Apenas para prevenir um bug

				// ---- //

				detetive_Linha = 10;
				detetive_Coluna = 7;

				detetive_Rect.x = grid[10][7].x - 16;
				detetive_Rect.y = grid[10][7].y - 16;

				detetive_Rect_Hitbox.x = grid[10][7].x - 16 + detetive_Rect.w / 2;
				detetive_Rect_Hitbox.y = grid[10][7].y - 16 + detetive_Rect.h / 2;
			}
		}
		else if (num_cenario == 0) // esquerda da delegacia
		{
			// Se o detetive estiver nessas coordenadas do mapa ele passa para a sala do centro da delegacia
			if (detetive_Linha == 4 && detetive_Coluna == 14)
			{
				num_cenario = 1;

				detetive_Linha = 4;
				detetive_Coluna = 1;

				detetive_Rect.x = grid[4][1].x -16;
				detetive_Rect.y = grid[4][1].y -16;

				detetive_Rect_Hitbox.x = grid[4][1].x - 16 + detetive_Rect.w / 2;
				detetive_Rect_Hitbox.y = grid[4][1].y - 16 + detetive_Rect.h / 2;
			}
		}
		else if (num_cenario == 2) // direita da delegacia
		{
			// Se o detetive estivar nessas coordenadas do mapa ele passa pra sala do centro da delegacia
			if (detetive_Linha == 4 && detetive_Coluna == 0)
			{
				num_cenario = 1;

				detetive_Linha = 4;
				detetive_Coluna = 13;

				detetive_Rect.x = grid[4][13].x -16;
				detetive_Rect.y = grid[4][13].y -16;

				detetive_Rect_Hitbox.x = grid[4][13].x - 16 + detetive_Rect.w / 2;
				detetive_Rect_Hitbox.y = grid[4][13].y - 16 + detetive_Rect.h / 2;
			}
		}

		// SDL copy das texturas do cenário

		if (num_cenario == 1)
		{
			SDL_RenderCopy(window_Renderer, background_Texture_Centro, NULL, NULL);
		}
		else if (num_cenario == 0)
		{
			SDL_RenderCopy(window_Renderer, background_Texture_Esquerda, NULL, NULL);
		}
		else if (num_cenario == 2)
		{
			SDL_RenderCopy(window_Renderer, background_Texture_Direita, NULL, NULL);
		}


		// SDL copy das texturas do detetive

		if (cima)
		{
			switch (frame_Detetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive_Costa_1_Texture, NULL, &detetive_Rect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive_Costa_2_Texture, NULL, &detetive_Rect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive_Costa_3_Texture, NULL, &detetive_Rect);
				break;
			}
		}
		else if (esq)
		{
			switch (frame_Detetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Esquerdo_1_Texture, NULL, &detetive_Rect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Esquerdo_2_Texture, NULL, &detetive_Rect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Esquerdo_3_Texture, NULL, &detetive_Rect);
				break;
			}
		}
		else if (baixo)
		{
			switch (frame_Detetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive_Frente_1_Texture, NULL, &detetive_Rect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive_Frente_2_Texture, NULL, &detetive_Rect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive_Frente_3_Texture, NULL, &detetive_Rect);
				break;
			}
		}
		else if (dir)
		{
			switch (frame_Detetive)
			{
			case 0:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Direito_1_Texture, NULL, &detetive_Rect);
				break;
			case 1:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Direito_2_Texture, NULL, &detetive_Rect);
				break;
			case 2:
				SDL_RenderCopy(window_Renderer, detetive_Lado_Direito_3_Texture, NULL, &detetive_Rect);
				break;
			}
		}
		else
		{
			if (detetive_Lado == 1)
			{
				SDL_RenderCopy(window_Renderer, detetive_Costa_1_Texture, NULL, &detetive_Rect);
			}
			else if (detetive_Lado == 2)
			{
				SDL_RenderCopy(window_Renderer, detetive_Lado_Esquerdo_2_Texture, NULL, &detetive_Rect);
			}
			else if (detetive_Lado == 3)
			{
				SDL_RenderCopy(window_Renderer, detetive_Frente_1_Texture, NULL, &detetive_Rect);
			}
			else if (detetive_Lado == 4)
			{
				SDL_RenderCopy(window_Renderer, detetive_Lado_Direito_2_Texture, NULL, &detetive_Rect);
			}
		}

		// ------------- //

		frame_Detetive += 1;

		if (frame_Detetive == 3)
		{
			frame_Detetive = 0;
		}

		// ------------- //

		if (num_cenario == 1)
		{
			SDL_RenderCopy(window_Renderer, planta_Texture, NULL, &planta_Direita_Rect);
			SDL_RenderCopy(window_Renderer, planta_Texture, NULL, &planta_Esquerda_Rect);
			SDL_RenderCopy(window_Renderer, lixeira_Texture, NULL, &lixeira_Rect);
		}
		else if (num_cenario == 0)
		{
			SDL_RenderCopy(window_Renderer, bancadas_Texture, NULL, NULL);
		}

		// ------------- //

		SDL_Delay(50); // Fim da logica do loop

		// ------------- //

		// Mostra o mapa da delegacia
		
		
		for (int linha = 0; linha < 12; linha++)
		{
			for (int coluna = 0; coluna < 15; coluna++)
			{
				if (num_cenario == 1)
				{
					printf("%c ", delegacia_Centro[linha][coluna]);
				}
				else if (num_cenario == 0)
				{
					printf("%c ", delegacia_Esquerda[linha][coluna]);
				}
				else if (num_cenario == 2)
				{
					printf("%c ", delegacia_Direita[linha][coluna]);
				}
			}
			printf("\n");
		}


	} // fim do while(cenario)

	// Finalização da função

	SDL_DestroyTexture(background_Texture_Centro);
	SDL_DestroyTexture(background_Texture_Direita);
	SDL_DestroyTexture(background_Texture_Esquerda);

	SDL_DestroyTexture(detetive_Costa_1_Texture);
	SDL_DestroyTexture(detetive_Costa_2_Texture);
	SDL_DestroyTexture(detetive_Costa_3_Texture);
	SDL_DestroyTexture(detetive_Frente_1_Texture);
	SDL_DestroyTexture(detetive_Frente_2_Texture);
	SDL_DestroyTexture(detetive_Frente_3_Texture);
	SDL_DestroyTexture(detetive_Lado_Direito_1_Texture);
	SDL_DestroyTexture(detetive_Lado_Direito_2_Texture);
	SDL_DestroyTexture(detetive_Lado_Direito_3_Texture);
	SDL_DestroyTexture(detetive_Lado_Esquerdo_1_Texture);
	SDL_DestroyTexture(detetive_Lado_Esquerdo_2_Texture);
	SDL_DestroyTexture(detetive_Lado_Esquerdo_3_Texture);

	SDL_DestroyTexture(planta_Texture);
	SDL_DestroyTexture(lixeira_Texture);
	SDL_DestroyTexture(bancadas_Texture);

	background_Texture_Centro = NULL;
	background_Texture_Direita = NULL;
	background_Texture_Esquerda = NULL;

	detetive_Costa_1_Texture = NULL;
	detetive_Costa_2_Texture = NULL;
	detetive_Costa_3_Texture = NULL;
	detetive_Frente_1_Texture = NULL;
	detetive_Frente_2_Texture = NULL;
	detetive_Frente_3_Texture = NULL;
	detetive_Lado_Direito_1_Texture = NULL;
	detetive_Lado_Direito_2_Texture = NULL;
	detetive_Lado_Direito_3_Texture = NULL;
	detetive_Lado_Esquerdo_1_Texture = NULL;
	detetive_Lado_Esquerdo_2_Texture = NULL;
	detetive_Lado_Esquerdo_3_Texture = NULL;

	planta_Texture = NULL;
	lixeira_Texture = NULL;
	bancadas_Texture = NULL;

} // Fim da função cenario_delegacia()

void cenario_1(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Rect* main_Rect, bool som_Ligado)
{
	coloca_fundo_preto(window_Renderer);

	//int cenario_Width = 320;  //20x16
	//int cenario_Height = 240; //15x16

	int cenario_Width = 0;  //??x16
	int cenario_Height = 0; //??x16
	int amplificador = 3;
	int lado = 16;

	SDL_Rect cenario_Rect;
	cenario_Rect.x = 1280 / 2 - cenario_Width / 2 * amplificador;
	cenario_Rect.y = 720 / 2 - cenario_Height / 2 * amplificador;
	cenario_Rect.w = cenario_Width * amplificador;
	cenario_Rect.h = cenario_Height * amplificador;

	SDL_RenderSetViewport(window_Renderer, &cenario_Rect);

	// ------------------------------- //

	SDL_Texture* background_Texture_1 = load_texture("imagens\casa 1 quarto 1.png", window_Renderer);
	
	SDL_Texture* background_texture_2 = load_texture("imagens\casa 1 quarto 2.png", window_Renderer);


	// ------------------------------- //

	SDL_Texture* detetive_Texture = load_texture("imagens\sprites do detetive.png", window_Renderer);

	SDL_Rect detetive_Rect;

	SDL_Rect detetive_Clip;
	detetive_Clip.x = 0;
	detetive_Clip.y = 32;
	detetive_Clip.h = 32;
	detetive_Clip.w = 32;

	int quarto_1[15][20] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
							1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

	// ------------------------------- //
	
	int num_cenario = 1;

	SDL_Event event;
	bool cenario = true;

	while (cenario)
	{
		SDL_RenderPresent(window_Renderer);

		while (SDL_PollEvent(&event) != 0) // Enquanto existir evento o loop continua
		{
			// Evento: fechar main_Window
			if (event.type == SDL_QUIT)
			{
				cenario = false;
			}
			// Evento: tecla pressionada
			else if (event.type == SDL_KEYDOWN)
			{
				switch (event.key.keysym.sym)
				{
				case SDLK_w:
					break;

				case SDLK_a:
					break;
				
				case SDLK_s:
					break;
				
				case SDLK_d:
					break;
				}
			} // Fim do switch das teclas
		} // Fim do loop de eventos

		if (num_cenario == 1)
		{
			SDL_RenderCopy(window_Renderer, background_Texture_1, NULL, NULL);
		}
		else if (num_cenario == 2)
		{
			SDL_RenderCopy(window_Renderer, background_texture_2, NULL, NULL);
		}
		

	} // Fim do while(cenario)

	// Finalizando o cenario

	SDL_DestroyTexture(background_Texture_1);
	SDL_DestroyTexture(background_texture_2);

	background_Texture_1 = NULL;
	background_texture_2 = NULL;

} // Fim da função cenario_1()

void cenario_2(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Rect* main_Rect, bool som_Ligado)
{

}

void cenario_3(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Rect* main_Rect, bool som_Ligado)
{

}

void cenario_4(SDL_Renderer* window_Renderer, SDL_Surface* window_Surface, SDL_Rect* main_Rect, bool som_Ligado)
{

}

// --------------------------------------------------------------------------------------- //

int main(int argc, char* argv[])
{
	init();

	int window_Width = 1280;
	int window_Height = 720;

	bool game_loop = true;

	int dificuldade = 0;
	bool load_game = false;
	bool som_Ligado = true;

	SDL_Event event;

	// ------------------------------- //
	//  =-=   Núcleo do código   =-=   //
	SDL_Window* main_Window = SDL_CreateWindow("Jogo", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_Width, window_Height, SDL_WINDOW_SHOWN);
	SDL_Surface* main_Surface = SDL_GetWindowSurface(main_Window);

	SDL_Renderer* window_Renderer = SDL_CreateRenderer(main_Window, -1, SDL_RENDERER_ACCELERATED);
	SDL_SetRenderDrawColor(window_Renderer, 0xFF, 0xFF, 0xFF, 255);

	SDL_Rect main_Rect;
	main_Rect.x = 0;
	main_Rect.y = 0;
	main_Rect.w = window_Width;
	main_Rect.h = window_Height;
	
	// ------------------------------- //

	menu(window_Renderer, main_Surface, &load_game, &som_Ligado);

	if (load_game)
	{
		
	}
	else
	{
		escolher_dificuldade(window_Renderer, main_Surface, &dificuldade);
		
		inicio_jornal(window_Renderer, main_Surface);
	}
	
	cenario_delegacia(window_Renderer, main_Surface, &main_Rect, load_game, dificuldade, som_Ligado);
	

	// ------------------------------- //

	quit();

	return 0;
}
